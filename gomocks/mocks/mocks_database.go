// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\erons\LoginAuthenticator\config\database\database.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\erons\LoginAuthenticator\config\database\database.go -destination=C:\Users\erons\LoginAuthenticator\gomocks\mocks\mocks_database.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/eron97/LoginAuthenticator.git/config/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// ReadAll mocks base method.
func (m *MockDBRepository) ReadAll() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDBRepositoryMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDBRepository)(nil).ReadAll))
}
