// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\erons\LoginAuthenticator\config\database\database.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\erons\LoginAuthenticator\config\database\database.go -destination=C:\Users\erons\LoginAuthenticator\gomocks\mocks\mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/eron97/LoginAuthenticator.git/config/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDBService is a mock of DBService interface.
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService.
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance.
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// QueryAllUsers mocks base method.
func (m *MockDBService) QueryAllUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllUsers indicates an expected call of QueryAllUsers.
func (mr *MockDBServiceMockRecorder) QueryAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllUsers", reflect.TypeOf((*MockDBService)(nil).QueryAllUsers))
}
